#+TITLE:     Pony Shoe
#+AUTHOR:    damon-kwok
#+EMAIL:     damon-kwok@outlook.com
#+DATE:      2020-04-25
#+OPTIONS: toc:nil creator:nil author:nil email:nil timestamp:nil html-postamble:nil
#+TODO: TODO DOING DONE

[[https://opencollective.com/ponyc][file:logo.jpg]]
# ** My little wish
# #+BEGIN_SRC pony
# let list = {1, 2, 5, 6, 7}            // List Literals
# let arr  = 1..5 // [1; 2; 3; 4; 5;]   // Array `range` Sugar
# let set  = <1, 2, 2, 3, 4, 4, 5>      // Set Literals : auto uniq: <1, 2, 3, 4, 5>
# let map  = <"a":1, "b":2, "c":3>      // Map Literals
# #+END_SRC

*!This is just my scratch paper!*
Note, Generic parameters are omitted from the example

Prefab type alias:
#+BEGIN_SRC pony
type StrSeq is Seqs[String ref, U8]
#+END_SRC

// For example:
#+BEGIN_SRC pony
let str = "hello,world".string()
StrSeq.is_member(str, 'w')
true
#+END_SRC

*** Basic
#+BEGIN_SRC pony
Seqs.is_all([2; 4; 6], {(x: U32): Bool => x %% 2 == 0})
true

Seqs.is_all([2; 3; 4], {(x: U32): Bool => x %% 2 == 0})
false

Seqs.is_all([], {(x: U32): Bool => x > 0})
true

Seqs.is_any([2; 4; 6], {(x: U32): Bool => x %% 2 == 1})
false

Seqs.is_any([2; 3; 4], {(x: U32): Bool => x %% 2 == 1})
true

Seqs.is_any([], {(x: U32): Bool => x > 0})
false

Seqs.is_empty([])
true

Seqs.is_empty([1; 2; 3])
false

Seqs.is_member([1; 2; 3; 4; 5; 6], 5)
true

Seqs.is_member([1; 2; 3; 4; 5; 6], 7)
false

Seqs.count([1; 2; 3; 4; 5; 6])
6
#+END_SRC

*** Traverse
#+BEGIN_SRC pony
Seqs.each(["some"; "example"], {(x: String) => print(x)})
"some"
"example"

Seqs.each(["a"; "b"], {(i: USize, x: String) => print(i.string()+"> "+x)})
"0> a"
"1> b"

Seqs.each(["apple"; "orange"], {(x: String) => print(x)}, 2)
"apple"
"orange"
"apple"
"orange"

Seqs.map([1; 2; 3], {(x: U32): U32 => x * 2})
[2; 4; 6]

Seqs.map([1; 2; 3], {(x: U32): U32 => x * 2}, 2)
[4; 16; 36]

Seqs.map([1; 2; 3; 4; 5], {(x: U32): U32 => x * x})
[1; 4; 9, 16, 25]

Seqs.map([1; 2; 3; 4; 5], {(i: USize, x: U32): U32 => x * x})
[1; 4; 9, 16, 25]

Seqs.scan([1; 2; 3; 4; 5], {(prev: U32, curr: U32): U32 => prev+curr })
[1; 3; 6; 10; 15]

Seqs.scan([1; 2; 3; 4; 5], {(prev: U32, curr: U32): U32 => prev*curr })
[1; 2; 6; 24; 120]

Seqs.stair(['a'; 'b'; 'c'], {(x: U32) => print(x)})
'a'
'a' 'a'
'c' 'c' 'c'

fun output (i: USize, x: U32) {
  let str = (i+1).string() + "x" + (i+1).string() + "="
  let v= (i+1) * x
  Debug.out(str+v.string())
}
Seqs.stair([1; 2; 3;], {(i: USize, x: U32) => output(i, x)})
1x1=1
1x2=2 2x2=4
1x3=3 2x3=6 3x3=9

Seqs.table(["name"], ["lucy", "lily"], {(col: String, row: String) => print(col+":"+row) })
"name:lucy"
"name:lily"

let f = {(col: U32, row: U32) => print(col*row) }
Seqs.table(Num.range_i(1,3), Num.range_i(1,3), f)
1 2 3
2 4 6
3 6 9

Seqs.matix([Num.range_i(1,9), Num.range_i(1,9)], Num.range_i(1,9)], f)
...

Seqs.skip([1; 2; 3; 4; 5; 6; 7], 1, {(x: U32) => print(x.string())})
"1"
"3"
"5"
"7"

Seqs.skip([1; 2; 3; 4; 5; 6; 7], 2, {(i: USize, x: U32) => print(i.string()+":"+x.string())})
"0:1"
"3:4"
"6:7"
#+END_SRC

*** Find
#+BEGIN_SRC pony
Seqs.min([5; 6; 7; 3; 1; 2])
1

Seqs.max([5; 6; 7; 3; 1; 2])
7

Seqs.min_max([5; 6; 7; 3; 1; 2]
(1, 7)

Seqs.filter([1; 2; 3], {(x: B): Bool => x %% 2 == 0})
[2]

Seqs.first([1; 2; 3; 4; 5; 6])
1

Seqs.second([1; 2; 3; 4; 5; 6])
2

Seqs.at([1; 2; 3; 4; 5; 6], 3)
4

Seqs.head([1; 2; 3; 4; 5; 6])
[1]

Seqs.tail([1; 2; 3; 4; 5; 6])
[2; 3; 4; 5; 6]
#+END_SRC

*** Sort
#+BEGIN_SRC pony

Seqs.swap([2; 3; 1; 5], 0, 2)
[1; 3; 2; 5]

Seqs.reverse([1; 2; 3])
[3; 2; 1]

Seqs.sort([2; 3; 1])
[1; 2; 3]

Seqs.sort_by(["some"; "kind"; "of"; "monster"], {(x: String): USize => x.size()})
["of"; "some"; "kind"; "monster"]

Seqs.shuffle([1; 2; 3; 4; 5])
[3; 1; 4; 2; 5]

Seqs.rotation([1; 2; 3; 4; 5; 6; 7], 1)
[7; 1; 2; 3; 4; 5; 6]

Seqs.rotation({1, 2, 3, 4, 5, 6, 7}, 2)
{6, 7, 1, 2, 3, 4, 5}
#+END_SRC

*** Split/Group
#+BEGIN_SRC pony
Seqs.chunk_by([1; 2; 2; 3; 4; 4; 6; 7; 7], {(x: U32): Bool => x%%2==1 })
[[1]; [2; 2]; [3]; [4; 4; 6]; [7; 7]]

Seqs.chunk_every([1; 2; 3; 4; 5; 6], 2)
[[1; 2]; [3; 4]; [5; 6]]

Seqs.split([1, 2, 3], 2)
[[1; 2]; [3]]
#+END_SRC

*** Drop
#+BEGIN_SRC pony

Seqs.reject([1; 2; 3], {(x:U32): U32 => x%%2 == 0})
[1; 3]

Seqs.take([1; 2; 3], 2)
[1; 2]

Seqs.take_random(Num.range_i(1, 10), 2)
[7; 2]

Seqs.dedup([1; 2; 3; 3; 2; 1])
[1; 2; 3; 2; 1]

Seqs.dedup_by([(1, "a"), (2, "b"), (2, "c"), (1, "a")], {(x: B): Any => x._1})
[(1, "a"), (2, "b"), (1, "a")]

Seqs.drop([1; 2; 3], 2)
[3]

Seqs.drop([1; 2; 3], -1)
[1; 2]

Seqs.uniq([1, 5, 3, 3, 2, 3, 1, 5, 4])
[1, 5, 3, 2, 4]

#+END_SRC

*** Merge
#+BEGIN_SRC pony

Seqs.merge([1; 2; 3], [4; 5; 6, 7])
[1; 2; 3; 4; 5; 6; 7]

Seqs.concat([[1; 2; 3]; [4; 5; 6]; [7; 8; 9])
[1; 2; 3; 4; 5; 6; 7; 8; 9]

Seqs.join([1; 2; 3])
"123"

Seqs.join([1; 2; 3], " = ")
"1 = 2 = 3"

Seqs.map_join([1; 2; 3], "", {(x: U32): U32 => x * 2})
"246"

Seqs.map_join([1; 2; 3], " = ", {(x: U32): U32 => x * 2})
"2 = 4 = 6"
#+END_SRC

*** Accumulate
#+BEGIN_SRC pony
Seqs.sum([1; 2; 3])
6

Seqs.sum_by(["1"; "2"; "3"], {(a: String, b: String): String => a+":"+b})
"1:2:3"

Seqs.scan([1; 2; 3; 4; 5], {(prev: U32, curr: U32): U32 => prev+curr })
[1; 3; 6; 10; 15]

Seqs.reduce([1; 2; 3], 0, {(x: U32, acc: U32):U32 => x + acc})
6

map_reduce([1; 2; 3], 0, {(x: U32, acc: U32): U32 => (x * 2, x + acc)})
([2; 4; 6], 6)
#+END_SRC

*** Reference
#+BEGIN_SRC pony
Seqs.slice([0; 1; 2; 3; 4; 5; 6; 7; 8; 9], 5, 20)
[5; 6; 7; 8; 9]

Seqs.slice([0; 1; 2; 3; 4; 5; 6; 7; 8; 9], -3, 2)
[7; 8]
#+END_SRC

*** Convert/Transform
#+BEGIN_SRC pony
Seqs.to_list([1; 2; 3])
{1, 2, 3}

Seqs.to_array({1, 2, 3})
[1; 2; 3]

Seqs.flat_map(['a', 'b', 'c'], {(x: U8): Array[Any] => [x; x]})
['a', 'a', 'b', 'b', 'c', 'c']

Seqs.intersperse([1; 2; 3], 0)
[1; 0; 2; 0; 3]

Seqs[Array[String], String].with_index(["a"; "b"; "c"])
[("a", 0); ("b", 1); ("c", 2)]

#+END_SRC

*** More
[[file:seqs.pony][seqs.pony]]
